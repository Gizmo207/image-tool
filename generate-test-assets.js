#!/usr/bin/env node
/**
 * SnapForge Test Asset Generator
 * Creates test images and files for automated testing
 */

import fs from 'fs';
import path from 'path';

// Create test-assets directory if it doesn't exist
const assetsDir = path.join(process.cwd(), 'test-assets');
if (!fs.existsSync(assetsDir)) {
  fs.mkdirSync(assetsDir, { recursive: true });
}

console.log('üé® Generating test assets...');

// Simple PNG header (1x1 red pixel)
function generateSmallPNG() {
  const pngData = Buffer.from([
    0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, // PNG signature
    0x00, 0x00, 0x00, 0x0D, // IHDR chunk length
    0x49, 0x48, 0x44, 0x52, // IHDR
    0x00, 0x00, 0x00, 0x64, // width = 100
    0x00, 0x00, 0x00, 0x64, // height = 100
    0x08, 0x02, 0x00, 0x00, 0x00, // bit depth, color type, compression, filter, interlace
    0xFF, 0x80, 0x83, 0xF1, // CRC
    0x00, 0x00, 0x00, 0x0C, // IDAT chunk length
    0x49, 0x44, 0x41, 0x54, // IDAT
    0x08, 0x1D, 0x01, 0x01, 0x00, 0x00, 0xFE, 0xFF, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01, // compressed data
    0x00, 0x00, 0x00, 0x00, // IEND chunk length
    0x49, 0x45, 0x4E, 0x44, // IEND
    0xAE, 0x42, 0x60, 0x82  // CRC
  ]);
  
  fs.writeFileSync(path.join(assetsDir, 'small.png'), pngData);
  console.log('‚úÖ Generated small.png (100x100)');
}

// Generate test files with simple content
function generateTestFiles() {
  const testFiles = {
    'large.jpg': createJPEGHeader(),
    'medium.webp': createWebPHeader(), 
    'animated.gif': createGIFHeader(),
    'transparent.png': createPNGHeader(),
    'tiny.png': createMinimalPNG(),
    'corrupt.fake': Buffer.from('This is not a valid image file - corrupt data for testing')
  };
  
  Object.entries(testFiles).forEach(([filename, data]) => {
    fs.writeFileSync(path.join(assetsDir, filename), data);
    console.log(`‚úÖ Generated ${filename}`);
  });
}

function createJPEGHeader() {
  // Minimal JPEG header
  return Buffer.from([
    0xFF, 0xD8, 0xFF, 0xE0, 0x00, 0x10, 0x4A, 0x46, 0x49, 0x46, 0x00, 0x01,
    0x01, 0x01, 0x00, 0x48, 0x00, 0x48, 0x00, 0x00, 0xFF, 0xDB, 0x00, 0x43,
    0x00, 0x08, 0x06, 0x06, 0x07, 0x06, 0x05, 0x08, 0x07, 0x07, 0x07, 0x09,
    0x09, 0x08, 0x0A, 0x0C, 0x14, 0x0D, 0x0C, 0x0B, 0x0B, 0x0C, 0x19, 0x12,
    0x13, 0x0F, 0x14, 0x1D, 0x1A, 0x1F, 0x1E, 0x1D, 0x1A, 0x1C, 0x1C, 0x20,
    0x24, 0x2E, 0x27, 0x20, 0x22, 0x2C, 0x23, 0x1C, 0x1C, 0x28, 0x37, 0x29,
    0x2C, 0x30, 0x31, 0x34, 0x34, 0x34, 0x1F, 0x27, 0x39, 0x3D, 0x38, 0x32,
    0x3C, 0x2E, 0x33, 0x34, 0x32, 0xFF, 0xD9 // End of image
  ]);
}

function createWebPHeader() {
  // Minimal WebP header
  return Buffer.from([
    0x52, 0x49, 0x46, 0x46, 0x28, 0x00, 0x00, 0x00, 0x57, 0x45, 0x42, 0x50,
    0x56, 0x50, 0x38, 0x20, 0x1C, 0x00, 0x00, 0x00, 0x30, 0x01, 0x00, 0x9D,
    0x01, 0x2A, 0x01, 0x00, 0x01, 0x00, 0x02, 0x00, 0x34, 0x25, 0xA4, 0x00,
    0x03, 0x70, 0x00, 0xFE, 0xFB, 0xFD, 0x50, 0x00
  ]);
}

function createGIFHeader() {
  // Minimal GIF header
  return Buffer.from([
    0x47, 0x49, 0x46, 0x38, 0x39, 0x61, 0x01, 0x00, 0x01, 0x00, 0x80, 0x00,
    0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x21, 0xF9, 0x04, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x2C, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00,
    0x00, 0x02, 0x02, 0x0C, 0x0A, 0x00, 0x3B
  ]);
}

function createPNGHeader() {
  // Minimal PNG header (transparent 1x1)
  return Buffer.from([
    0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D,
    0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
    0x08, 0x06, 0x00, 0x00, 0x00, 0x1F, 0x15, 0xC4, 0x89, 0x00, 0x00, 0x00,
    0x0B, 0x49, 0x44, 0x41, 0x54, 0x78, 0x9C, 0x63, 0x00, 0x01, 0x00, 0x00,
    0x05, 0x00, 0x01, 0x0D, 0x0A, 0x2D, 0xB4, 0x00, 0x00, 0x00, 0x00, 0x49,
    0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82
  ]);
}

function createMinimalPNG() {
  // Tiny 1x1 PNG
  return Buffer.from([
    0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D,
    0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
    0x08, 0x02, 0x00, 0x00, 0x00, 0x90, 0x77, 0x53, 0xDE, 0x00, 0x00, 0x00,
    0x0C, 0x49, 0x44, 0x41, 0x54, 0x08, 0xD7, 0x63, 0xF8, 0x00, 0x00, 0x00,
    0x00, 0x01, 0x00, 0x01, 0x9A, 0xDD, 0x32, 0xDB, 0x00, 0x00, 0x00, 0x00,
    0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82
  ]);
}

// Main execution
async function generateAssets() {
  try {
    generateSmallPNG();
    generateTestFiles();
    
    console.log('\nüéâ All test assets generated successfully!');
    console.log(`üìÇ Assets saved to: ${assetsDir}`);
    
    // List generated files
    const files = fs.readdirSync(assetsDir);
    console.log('\nüìã Generated files:');
    files.forEach(file => {
      const filepath = path.join(assetsDir, file);
      const stats = fs.statSync(filepath);
      const size = (stats.size / 1024).toFixed(2);
      console.log(`   ‚Ä¢ ${file} (${size} KB)`);
    });
    
  } catch (error) {
    console.error('‚ùå Error generating test assets:', error.message);
    process.exit(1);
  }
}

generateAssets();
